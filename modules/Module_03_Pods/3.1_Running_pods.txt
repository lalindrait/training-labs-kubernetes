======================================================================
Run your first pod - Using run 
======================================================================

kubectl run nginx --image=nginx
kubectl get pods
kubectl get pods --watch
kubectl get all -o wide
kubectl delete pod/nginx

kubectl run mybusybox1 -it --image busybox -- sh
kubectl run mybusybox1 -it --rm --image busybox -- sh

======================================================================
Run your first pod - Using apply & create
======================================================================

kind: Pod
apiVersion: v1
metadata:
  name: lvnginx
  labels:
    app: lvnginx
spec:
  containers:
  - name: lvnginx
    image: lalindrait/lvnginx:1.0
    ports:
    - containerPort: 8080


kubectl apply -f lvpod.yaml 
kubectl delete pod/lvnginx
kubectl delete pod lvnginx

### kubectl apply is declarative
kubectl apply -f lvpod.yaml
kubectl apply -f lvpod.yaml
kubectl delete -f lvpod.yaml

### kubectl create is imperative
kubectl create -f lvpod.yaml
kubectl create -f lvpod.yaml
kubectl delete pod lvnginx
kubectl delete -f lvpod.yaml


======================================================================
Running a multi-container pods
======================================================================

### use the lv-multicontainer-pod-1.yml


kubectl apply -f lv-multicontainer-pod.yml
kubectl get pods -o wide --watch
kubectl exec -it lv-nginx-multipod -c lvnginx -- /bin/bash
curl localhost

cat /proc/mounts  | grep nginxcd
cat /usr/share/nginx/html/index.html


### use the lv-multicontainer-pod-2.yml
kubectl apply -f lv-multicontainer-pod.yml
kubectl get pods -o wide --watch
kubectl exec -it lv-nginx-multipod -c lvnginx -- /bin/bash
curl localhost
kubectl exec -it lv-nginx-multipod -c lvrocky -- /bin/bash

### From inside the containers
ip addr
ps -ef

### Execute on a worker node
ps -ef | grep pause

======================================================================
Other usefull commands
======================================================================

kubectl explain pods --recursive
kubectl explain pod.spec.restartPolicy
kubectl explain pod.spec.affinity.nodeAffinity
kubectl explain pod.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution


# delete a pod forcefully stuck in a terminating state
kubectl delete pod calico-kube-controllers-7c968b5878-gqtpj --grace-period=0 --force -n kube-system

# get the running yaml spec of a pod
kubectl get pod prometheus-alertmanager-0 -n prometheus -o yaml > prometheus-alertmanager-0.yml